---
# LLVM version 16.0.0
Checks:
'-*,
  bugprone-*,
  -bugprone-exception-escape,
  cert-*,
  clang-diagnostic-*,
  clang-analyzer-*,
  hicpp-*,
  hicpp-avoid-*,
  -hicpp-explicit-conversions,
  misc-*,
  -misc-const-correctness,
  -misc-no-recursion,
  -misc-non-private-member-variables-in-classes,
  -misc-unused-parameters,
  modernize-*,
  -modernize-return-braced-init-list,
  -modernize-use-trailing-return-type,
  performance-*,
  portability-*,
  readability-*,
  -readability-identifier-length,
  -readability-identifier-naming,
  -readability-magic-numbers,
  -readability-qualified-auto,
  #FIXME -hicpp-avoid-c-arrays,-modernize-avoid-c-arrays,
  #XXX done
  # -hicpp-named-parameter,-readability-named-parameter,
  # -hicpp-braces-around-statements,-readability-braces-around-statements,
  # -hicpp-uppercase-literal-suffix,-readability-uppercase-literal-suffix,
'
WarningsAsErrors:  'clang-*'
HeaderFilterRegex: ''
AnalyzeTemporaryDtors: false
FormatStyle:     file
UseColor:        false
User:            klein_cl
CheckOptions:
  - { key: modernize-loop-convert.MaxCopySize,         value: '16'       }
  - { key: modernize-loop-convert.MinConfidence,       value: reasonable }
  - { key: modernize-loop-convert.NamingStyle,         value: CamelCase  }
  - { key: modernize-pass-by-value.IncludeStyle,       value: llvm       }
  - { key: modernize-replace-auto-ptr.IncludeStyle,    value: llvm       }
  - { key: modernize-use-nullptr.NullMacros,           value: 'NULL'     }
  - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
  - { key: readability-identifier-naming.MemberCase,             value: CamelCase  }
  - { key: readability-identifier-naming.MemberPrefix,           value: m          }
  - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
  - { key: readability-identifier-naming.StructCase,             value: camel_Snake_Back }
  - { key: readability-identifier-naming.FunctionCase,           value: lower_case }
  - { key: readability-identifier-naming.VariableCase,           value: camelBack  }
  - { key: readability-identifier-naming.GlobalConstantCase,     value: UPPER_CASE }
  - { key: readability-identifier-naming.EnumCase,               value: CamelCase  }
  - { key: readability-identifier-naming.EnumPrefix,             value: 'E'        }
  - { key: readability-identifier-naming.GlobalFunctionCase,     value: lower_case }
  - { key: readability-identifier-naming.GlobalVariableCase,     value: CamelCase  }
  - { key: readability-identifier-naming.GlobalVariablePrefix,   value: 'g'        }
  - { key: readability-identifier-naming.ConstexprFunctionCase,  value: CamelCase  }
  - { key: readability-identifier-naming.ConstexprMethodCase,    value: CamelCase  }
  - { key: readability-identifier-naming.ConstexprVariableCase,  value: camelBack  }
...

